//Ï∂îÍ∞Ä: 1.ÏÉÅÌÉú Î≥ÄÍ≤ΩÏãú ÏïåÎ¶º, 2.ÏóÖÎç∞Ïù¥Ìä∏ÏãúÍ∞ÑÏïåÎ¶º, 3.ÏÉàÎ°úÍ≥†Ïπ®Ïãú uiÏ¶âÏãú ÏóÖÎéÉ
//4.Ïù∏ÌÑ∞Î≤åÍ∞ÑÍ≤© Ïª§Ïä§ÌÖÄ, 5.ÎîîÏûêÏù∏,

//ÌÉùÎ∞∞Ï†ïÎ≥¥ Ï†ÄÏû•ÏùÄ chrome.storageÎ°ú ÌïúÎã§
//ÌÉùÎ∞∞Ï†ïÎ≥¥ Í¥ÄÎ†® Ïô∏Ïùò Ï†ÄÏû•ÏùÄ localStorageÎ°ú ÌïúÎã§
const milis = 10000; //1000ms = 1sec
let intervalId;
let isIntervaling;
console.log('thisisback' + findCurrentTime());
// false === null -> false Ï¶â, Ï†ÄÏû•Îêú Í∞íÏù¥ ÏóÜÏúºÎ©¥ trueÎ•º Ï§ÄÎã§
if (localStorage.getItem('intervaling') === null) {
    localStorage.setItem('intervaling', true);
}

const base_url = 'https://apis.tracker.delivery/carriers/';

//Î∞∞ÏÜ°ÏÉÅÌÉúÎ•º ÏïåÏïÑÎ≥∏Îã§.
function checkParcelInterval(milis) {
    //milisÎßàÎã§ Î∞òÎ≥µÌïúÎã§.
    intervalId = setInterval(function () {
        checkParcel();
    }, milis);
}
if (localStorage.getItem('intervaling') === 'true') {
    checkParcelInterval(milis);
}

chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
    //ÌôïÏù∏ Ï†ïÏßÄ Î©îÏÑ∏ÏßÄÎ•º Î∞õÏïòÎã§Î©¥
    if (request.type === 'stopInterval') {
        //clearIntervalÏùÑ Ïã§ÌñâÌïúÎã§. //ÏïÑÏù¥ÏΩò Î™®ÏñëÏùÑ Î∞îÍæºÎã§.
        localStorage.setItem('intervaling', false);
        clearInterval(intervalId);
    }
    //ÌôïÏù∏ Ïû¨Í∞ú Î©îÏÑ∏ÏßÄÎ•º Î∞õÏïòÎã§Î©¥ || ÏÉàÎ°úÍ≥†Ïπ® Î©îÏÑ∏ÏßÄÎ•º Î∞õÏïòÎã§Î©¥
    else if (request.type === 'startInterval') {
        //checkParcel, Ï¶â Îã§Ïãú Ïù∏ÌÑ∞Î≤åÏùÑ ÏãúÏûëÌïúÎã§.
        localStorage.setItem('intervaling', true);
        clearInterval(intervalId);
        checkParcelInterval(milis);
    } else if (request.type === 'reflashParcel') {
        checkParcel(() => {
            console.log('callback1');
            chrome.runtime.sendMessage({
                type: 'updateParcel'
            });
            console.log('callback2');
        });
        console.log('response!');
        sendResponse('response!');
    }
});

function checkParcel(cb) {
    chrome.storage.local.get(null, function (parcels) {
        let allKeys = Object.keys(parcels);
        for (let i = 0; i < allKeys.length; i++) {
            const currentKey = allKeys[i];
            console.log(parcels);
            const checkingParcel = parcels[currentKey];
            fetch(base_url + `${checkingParcel.company}/tracks/${checkingParcel.postNumber}`)
                .then(res => res.json())
                .then(res => {
                    //progressesÎ∞∞Ïó¥Ïùò ÎßàÏßÄÎßâ ÏöîÏÜå
                    const latestProgress = res.progresses[res.progresses.length - 1];
                    if (
                        latestProgress.location.name !== checkingParcel.location ||
                        latestProgress.status.text !== checkingParcel.status
                    ) {
                        const parcelUpdated = {
                            [currentKey]: {
                                company: checkingParcel.company,
                                postNumber: checkingParcel.postNumber,
                                location: latestProgress.location.name,
                                status: latestProgress.status.text
                            }
                            //ÌÅ¨Î°¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
                        };
                        chrome.storage.local.set(parcelUpdated, function () {
                            //ÏÉàÎ°úÏö¥ ÏÉÅÌÉúÎÇò Ïû•ÏÜåÏ†ïÎ≥¥Í∞Ä Ï†ÄÏû•Îê¨ÏúºÎãà ÏïåÎ¶º Í∏∞Îä•ÏùÑ ÎÑ£ÎäîÎã§.
                            console.log('!new Info!');
                            //Ïï± ÏïÑÏù¥ÏΩòÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú uiÍ∞Ä Í∞±Ïã†ÎêòÎãàÍπå ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠Ïãú ÏïåÎ¶º Ï¢ÖÎ£åÌïòÍ≤å ÌïúÎã§.
                        });
                    }
                    if (cb && i === allKeys.length - 1) {
                        //ÏΩúÎ∞±Ïù¥ ÏûàÍ≥† ÎßàÏßÄÎßâ Î∞òÎ≥µÎ¨∏Ïù¥Î©¥
                        cb();
                    }
                });
            console.log(`ÏóÖÎç∞Ïù¥Ìä∏Ìï®`);
        }
    });
}

function findCurrentTime() {
    //Ïù¥ Ìï®ÏàòÎ•º Ïù¥Ïö©Ìï¥ ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞ÑÏùÑ ÏïåÎ¶¨Ïûê
    let today = new Date();
    let year = today.getFullYear(); // ÎÖÑÎèÑ
    let month = today.getMonth() + 1; // Ïõî
    let date = today.getDate(); // ÎÇ†Ïßú
    let hours = today.getHours(); // Ïãú
    let minutes = today.getMinutes(); // Î∂Ñ
    let seconds = today.getSeconds(); // Ï¥à
    return year + 'Âπ¥' + month + 'Êúà' + date + 'Êó•' + hours + ':' + minutes + ':' + seconds;
}
// chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
//     if (request.type == 'addParcel') {
//         addtimer(request.company, request.postNumber);
//     }
//     sendResponse('good');
// });

// // background.js

// // This file has an example of how to make variables accessible to other scripts of the extension.

// // It also shows how to handle short lived messages from other scripts, in this case, from in-content.js

// // Note that not all extensions need of a background.js file, but extensions that need to persist data after a popup has closed may need of it.

// // A sample object that will be exposed further down and used on popup.js
// const sampleBackgroundGlobal = {
//     message: 'This object comes from background.js'
// };

// // Listen to short lived messages from in-content.js
// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
//     // Perform any ther actions depending on the message
//     console.log('background.js - received message from in-content.js:', message);
//     // Respond message
//     sendResponse('üëç');
// });

// // Make variables accessible from chrome.extension.getBackgroundPage()
// window.sampleBackgroundGlobal = sampleBackgroundGlobal;

// // // Regex-pattern to check URLs against.
// // // It matches URLs like: http[s]://[...]stackoverflow.com[...]
// // var urlRegex = /^https?:\/\/(?:[^./?#]+\.)?stackoverflow\.com/;

// // // A function to use as callback
// // function doStuffWithDom(domContent) {
// //     console.log('I received the following DOM content:\n' + domContent);
// // }

// // // When the browser-action button is clicked...
// // chrome.browserAction.onClicked.addListener(function (tab) {
// //     // ...check the URL of the active tab against our pattern and...
// //     if (urlRegex.test(tab.url)) {
// //         // ...if it matches, send a message specifying a callback too
// //         chrome.tabs.sendMessage(tab.id, { text: 'report_back' }, doStuffWithDom);
// //     }
// // });
